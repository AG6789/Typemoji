"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _plugin() {
  const data = require("@parcel/plugin");

  _plugin = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _fs() {
  const data = _interopRequireDefault(require("fs"));

  _fs = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const AUTORELOAD_BG = _fs().default.readFileSync(_path().default.join(__dirname, 'autoreload-bg.js'), 'utf8');

var _default = new (_plugin().Runtime)({
  apply({
    bundle,
    bundleGraph,
    options
  }) {
    if (!bundle.env.isBrowser() || bundle.env.isWorklet()) {
      return;
    }

    if (bundle.name == 'manifest.json') {
      const asset = bundle.getMainEntry();
      if ((asset === null || asset === void 0 ? void 0 : asset.meta.webextEntry) !== true) return; // Hack to bust packager cache when any descendants update

      const descendants = [];
      bundleGraph.traverseBundles(b => {
        descendants.push(b.id);
      }, bundle);
      return {
        filePath: __filename,
        code: JSON.stringify(descendants),
        isEntry: true
      };
    } else if (options.hmrOptions && bundle.type == 'js') {
      const manifest = bundleGraph.getBundles().find(b => {
        var _b$getMainEntry;

        return ((_b$getMainEntry = b.getMainEntry()) === null || _b$getMainEntry === void 0 ? void 0 : _b$getMainEntry.meta.webextEntry) === true;
      });
      const entry = manifest === null || manifest === void 0 ? void 0 : manifest.getMainEntry();
      const insertDep = entry === null || entry === void 0 ? void 0 : entry.meta.webextBGInsert;
      if (insertDep == null) return;
      const insertBundle = bundleGraph.getReferencedBundle((0, _nullthrows().default)(entry === null || entry === void 0 ? void 0 : entry.getDependencies().find(dep => dep.id === insertDep)), (0, _nullthrows().default)(manifest));
      let firstInsertableBundle;
      bundleGraph.traverseBundles((b, _, actions) => {
        if (b.type == 'js') {
          firstInsertableBundle = b;
          actions.stop();
        }
      }, insertBundle); // Add autoreload

      if (bundle === firstInsertableBundle) {
        var _options$hmrOptions$h, _options$hmrOptions, _options$hmrOptions$p, _options$hmrOptions2;

        return {
          filePath: __filename,
          code: `var HMR_HOST = ${JSON.stringify((_options$hmrOptions$h = (_options$hmrOptions = options.hmrOptions) === null || _options$hmrOptions === void 0 ? void 0 : _options$hmrOptions.host) !== null && _options$hmrOptions$h !== void 0 ? _options$hmrOptions$h : 'localhost')};` + `var HMR_PORT = '${(_options$hmrOptions$p = (_options$hmrOptions2 = options.hmrOptions) === null || _options$hmrOptions2 === void 0 ? void 0 : _options$hmrOptions2.port) !== null && _options$hmrOptions$p !== void 0 ? _options$hmrOptions$p : ''}';` + AUTORELOAD_BG,
          isEntry: true
        };
      }
    }
  }

});

exports.default = _default;