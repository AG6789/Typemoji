"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _plugin() {
  const data = require("@parcel/plugin");

  _plugin = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = new (_plugin().Packager)({
  async package({
    bundle,
    bundleGraph,
    options
  }) {
    let assets = [];
    bundle.traverseAssets(asset => {
      assets.push(asset);
    });
    const manifestAssets = assets.filter(a => a.meta.webextEntry === true);
    (0, _assert().default)(assets.length == 2 && manifestAssets.length == 1, 'Web extension bundles must contain exactly one manifest asset and one runtime asset');
    const asset = manifestAssets[0];

    const relPath = b => (0, _utils().relativeBundlePath)(bundle, b, {
      leadingDotSlash: false
    });

    const manifest = JSON.parse(await asset.getCode());
    const deps = asset.getDependencies();
    const war = [];

    for (const contentScript of manifest.content_scripts || []) {
      const srcBundles = deps.filter(d => {
        var _contentScript$js, _contentScript$css;

        return ((_contentScript$js = contentScript.js) === null || _contentScript$js === void 0 ? void 0 : _contentScript$js.includes(d.id)) || ((_contentScript$css = contentScript.css) === null || _contentScript$css === void 0 ? void 0 : _contentScript$css.includes(d.id));
      }).map(d => (0, _nullthrows().default)(bundleGraph.getReferencedBundle(d, bundle)));
      contentScript.css = [...new Set((contentScript.css || []).concat(srcBundles.flatMap(b => bundleGraph.getReferencedBundles(b)).filter(b => b.type == 'css').map(relPath)))];
      const resources = srcBundles.flatMap(b => {
        const children = [];
        const siblings = bundleGraph.getReferencedBundles(b);
        bundleGraph.traverseBundles(child => {
          if (b !== child && !siblings.includes(child)) {
            children.push(child);
          }
        }, b);
        return children;
      }).map(relPath);

      if (resources.length > 0) {
        war.push({
          matches: contentScript.matches.map(match => {
            if (/^(((http|ws)s?)|ftp|\*):\/\//.test(match)) {
              let pathIndex = match.indexOf('/', match.indexOf('://') + 3); // Avoids creating additional errors in invalid match URLs

              if (pathIndex == -1) pathIndex = match.length;
              return match.slice(0, pathIndex) + '/*';
            }

            return match;
          }),
          resources
        });
      }
    }

    if (manifest.manifest_version == 3 && options.hmrOptions) {
      war.push({
        matches: ['<all_urls>'],
        resources: ['__parcel_hmr_proxy__']
      });
    }

    const warResult = (manifest.web_accessible_resources || []).concat(manifest.manifest_version == 2 ? [...new Set(war.flatMap(entry => entry.resources))] : war);
    if (warResult.length > 0) manifest.web_accessible_resources = warResult;
    let {
      contents
    } = (0, _utils().replaceURLReferences)({
      bundle,
      bundleGraph,
      contents: JSON.stringify(manifest)
    });
    return {
      contents
    };
  }

});

exports.default = _default;