"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var emojis = require("emojilib"),
    emojiKeys = emojis.keys,
    iterateObject = require("iterate-object");

delete emojis.keys;

var Match = function () {
    /**
     * Match
     * Creates a new `Match` instance.
     *
     * It contains the following properties:
     *
     *  - `input` (String): The input string.
     *  - `score` (Number): A number between `0` and `1`. The closer to `1` it is, the better match it is.
     *  - `emoji` (Object): The emoji object.
     *  - `emoji_name` (String): The emoji name.
     *
     * @name Match
     * @function
     * @param {String} input The input string (just a word).
     */
    function Match(input) {
        _classCallCheck(this, Match);

        var r = emojis[input],
            finalScore = -1,
            finalEmoji = null,
            emojiName = null;

        this.input = input;

        if (r) {
            finalScore = 1;
            finalEmoji = r;
            emojiName = input;
        } else {
            iterateObject(emojis, function (e, n) {
                for (var i = 0; i <= e.keywords.length; ++i) {
                    var c = e.keywords[i] || n,
                        equals = c === input,
                        indexF = c.indexOf(input),
                        indexS = input.indexOf(c),
                        score = equals && input.length ? 1 : indexF === 0 || indexS === 0 && c.length > 1 ? 0.95 : indexF > 0 || indexS > 0 ? 0.93 : -1;

                    if (score > finalScore) {
                        finalEmoji = e;
                        emojiName = n;
                        finalScore = score;
                        if (score === 1) {
                            return false;
                        }
                    }
                }
            });
        }

        this.score = finalScore;
        this.emoji = finalEmoji;
        this.emoji_name = emojiName;
    }

    /**
     * toString
     * Stringifies the `Match` instance.
     *
     * @name toString
     * @function
     * @return {String} The stringified emoji (e.g. `":smile:"`).
     */


    _createClass(Match, [{
        key: "toString",
        value: function toString() {
            return ":" + this.emoji_name + ":";
        }
    }]);

    return Match;
}();

/**
 * emojiFromWord
 * Gets a `Match` instance for an input string.
 *
 * @name emojiFromWord
 * @function
 * @param {String} input The input string (just a word).
 * @return {Match} A `Match` instance (documented above).
 */


module.exports = function emojiFromWord(input) {
    return new Match(input);
};